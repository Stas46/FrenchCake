// –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeFillingSelects();
    generateTierInputs(); // –¥–ª—è –º–Ω–æ–≥–æ—è—Ä—É—Å–Ω—ã—Ö —Ç–æ—Ä—Ç–æ–≤
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ç–æ—Ä—Ç–∞
    const shapeSelect = document.getElementById('cakeShape');
    if (shapeSelect) {
        shapeSelect.addEventListener('change', updateSizeInputs);
    }
});

/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–∞—á–∏–Ω–æ–∫
 */
function initializeFillingSelects() {
    const fillings = getAllFillings();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç—ã –Ω–∞—á–∏–Ω–æ–∫
    const selects = ['filling', 'fillingForSize'];
    
    selects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (!select) return;
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—á–∏–Ω–∫–∏ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        fillings.forEach(filling => {
            const option = document.createElement('option');
            option.value = filling.key;
            option.textContent = `${filling.name} (${filling.density} –≥/—Å–º¬≥)`;
            select.appendChild(option);
        });
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
 */
function updateSizeInputs() {
    const shape = document.getElementById('cakeShape').value;
    const container = document.getElementById('sizeInputs');
    
    if (!shape || !container) return;
    
    let inputsHtml = '';
    
    switch (shape) {
        case 'round':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="diameter">–î–∏–∞–º–µ—Ç—Ä (—Å–º):</label>
                        <input type="number" id="diameter" min="5" max="100" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 20" required>
                        <small>–û–±—ã—á–Ω–æ –æ—Ç 10 –¥–æ 40 —Å–º</small>
                    </div>
                    <div class="input-group">
                        <label for="height">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="height" min="1" max="30" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6" required>
                        <small>–û–±—ã—á–Ω–æ –æ—Ç 4 –¥–æ 12 —Å–º</small>
                    </div>
                </div>
            `;
            break;
            
        case 'square':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="side">–°—Ç–æ—Ä–æ–Ω–∞ (—Å–º):</label>
                        <input type="number" id="side" min="5" max="100" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 20" required>
                        <small>–û–±—ã—á–Ω–æ –æ—Ç 10 –¥–æ 40 —Å–º</small>
                    </div>
                    <div class="input-group">
                        <label for="heightSquare">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="heightSquare" min="1" max="30" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6" required>
                        <small>–û–±—ã—á–Ω–æ –æ—Ç 4 –¥–æ 12 —Å–º</small>
                    </div>
                </div>
            `;
            break;
            
        case 'rectangular':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="length">–î–ª–∏–Ω–∞ (—Å–º):</label>
                        <input type="number" id="length" min="5" max="100" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 30" required>
                        <small>–î–ª–∏–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</small>
                    </div>
                    <div class="input-group">
                        <label for="width">–®–∏—Ä–∏–Ω–∞ (—Å–º):</label>
                        <input type="number" id="width" min="5" max="100" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 20" required>
                        <small>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞</small>
                    </div>
                    <div class="input-group">
                        <label for="heightRect">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="heightRect" min="1" max="30" step="0.1" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6" required>
                        <small>–û–±—ã—á–Ω–æ –æ—Ç 4 –¥–æ 12 —Å–º</small>
                    </div>
                </div>
            `;
            break;
    }
    
    container.innerHTML = inputsHtml;
}

/**
 * –†–ê–°–ß–ï–¢ –í–ï–°–ê –ü–û –†–ê–ó–ú–ï–†–ê–ú
 */
function calculateWeight() {
    const shape = document.getElementById('cakeShape').value;
    const fillingKey = document.getElementById('filling').value;
    
    if (!shape) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Ç–æ—Ä—Ç–∞', 'error');
        return;
    }
    
    if (!fillingKey) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É', 'error');
        return;
    }
    
    let dimensions = {};
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã
        switch (shape) {
            case 'round':
                dimensions.diameter = parseFloat(document.getElementById('diameter').value);
                dimensions.height = parseFloat(document.getElementById('height').value);
                break;
            case 'square':
                dimensions.side = parseFloat(document.getElementById('side').value);
                dimensions.height = parseFloat(document.getElementById('heightSquare').value);
                break;
            case 'rectangular':
                dimensions.length = parseFloat(document.getElementById('length').value);
                dimensions.width = parseFloat(document.getElementById('width').value);
                dimensions.height = parseFloat(document.getElementById('heightRect').value);
                break;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        const result = calculator.calculateWeightFromDimensions(shape, dimensions, fillingKey);
        
        if (result.success) {
            displayWeightResult(result);
            showNotification('–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
        } else {
            showNotification(result.error, 'error');
        }
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: ' + error.message, 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞
 */
function displayWeightResult(result) {
    const resultSection = document.getElementById('weightResult');
    const output = document.getElementById('weightOutput');
    
    const html = `
        <div class="result-item">
            <h4>üéÇ ${result.shape}</h4>
            <div class="result-detail">
                <span>–†–∞–∑–º–µ—Ä—ã:</span>
                <span class="result-value">${result.dimensions}</span>
            </div>
            <div class="result-detail">
                <span>–ù–∞—á–∏–Ω–∫–∞:</span>
                <span class="result-value">${result.filling.name}</span>
            </div>
            <div class="result-detail">
                <span>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</span>
                <span class="result-value">${result.filling.density} –≥/—Å–º¬≥</span>
            </div>
            <div class="result-detail">
                <span>–û–±—ä–µ–º:</span>
                <span class="result-value">${result.volume} —Å–º¬≥</span>
            </div>
            <div class="result-detail" style="font-size: 1.2em; font-weight: bold; color: #007bff;">
                <span>–í–µ—Å —Ç–æ—Ä—Ç–∞:</span>
                <span class="result-value">${result.weight} –∫–≥</span>
            </div>
            <div class="calculation-details">
                <h5>üìê –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞:</h5>
                <p><code>${result.details.formula}</code></p>
                <p><code>–í–µ—Å = –û–±—ä–µ–º √ó –ü–ª–æ—Ç–Ω–æ—Å—Ç—å</code></p>
                <h5>üßÆ –†–∞—Å—á–µ—Ç:</h5>
                <pre>${result.details.calculation}</pre>
            </div>
        </div>
    `;
    
    output.innerHTML = html;
    resultSection.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultSection.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–û–í –ü–û –í–ï–°–£
 */
function calculateSize() {
    const targetWeight = parseFloat(document.getElementById('targetWeight').value);
    const fillingKey = document.getElementById('fillingForSize').value;
    const preferredShape = document.getElementById('preferredShape').value;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const useCustomParams = document.getElementById('useCustomParams').checked;
    let customParams = null;
    
    if (useCustomParams) {
        customParams = {
            minHeight: parseFloat(document.getElementById('minHeight').value) || 4,
            maxHeight: parseFloat(document.getElementById('maxHeight').value) || 12,
            minDiameter: parseFloat(document.getElementById('minDiameter').value) || 12,
            maxDiameter: parseFloat(document.getElementById('maxDiameter').value) || 45,
            preferredHeights: document.getElementById('preferredHeights').value
        };
        
        // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –≤—ã—Å–æ—Ç—ã
        if (customParams.preferredHeights.trim()) {
            customParams.preferredHeights = customParams.preferredHeights
                .split(',')
                .map(h => parseFloat(h.trim()))
                .filter(h => !isNaN(h) && h > 0);
        } else {
            customParams.preferredHeights = null;
        }
    }
    
    if (!targetWeight || targetWeight <= 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å', 'error');
        return;
    }
    
    if (!fillingKey) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É', 'error');
        return;
    }
    
    try {
        const result = calculator.calculateSizeFromWeight(targetWeight, fillingKey, preferredShape, customParams);
        
        if (result.success) {
            displaySizeResult(result);
            showNotification('–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã!', 'success');
        } else {
            showNotification(result.error, 'error');
        }
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: ' + error.message, 'error');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
 */
function displaySizeResult(result) {
    const resultSection = document.getElementById('sizeResult');
    const output = document.getElementById('sizeOutput');
    
    let html = `
        <div class="result-summary">
            <h4>üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>
            <p><strong>–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å:</strong> ${result.targetWeight} –∫–≥</p>
            <p><strong>–ù–∞—á–∏–Ω–∫–∞:</strong> ${result.filling.name} (${result.filling.density} –≥/—Å–º¬≥)</p>
            <p><strong>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–±—ä–µ–º:</strong> ${result.requiredVolume} —Å–º¬≥</p>
        </div>
    `;
    
    if (result.variants.length === 0) {
        html += '<p class="no-variants">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤</p>';
    } else {
        html += '<h4>üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</h4>';
        
        result.variants.forEach((variant, index) => {
            const accuracy = ((1 - variant.deviation / result.targetWeight) * 100).toFixed(1);
            
            html += `
                <div class="result-item">
                    <h5>üéØ –í–∞—Ä–∏–∞–Ω—Ç ${index + 1}: ${variant.shape}</h5>
                    <div class="result-detail">
                        <span>–†–∞–∑–º–µ—Ä—ã:</span>
                        <span class="result-value">${variant.dimensions}</span>
                    </div>
                    <div class="result-detail">
                        <span>–û–±—ä–µ–º:</span>
                        <span class="result-value">${variant.volume} —Å–º¬≥</span>
                    </div>
                    <div class="result-detail">
                        <span>–†–∞—Å—á–µ—Ç–Ω—ã–π –≤–µ—Å:</span>
                        <span class="result-value">${variant.weight} –∫–≥</span>
                    </div>
                    <div class="result-detail">
                        <span>–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                        <span class="result-value">${accuracy}%</span>
                    </div>
                </div>
            `;
        });
    }
    
    output.innerHTML = html;
    resultSection.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultSection.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –ú–ù–û–ì–û–Ø–†–£–°–ù–´–ï –¢–û–†–¢–´
 */
function generateTierInputs() {
    const tierCount = parseInt(document.getElementById('tierCount').value) || 2;
    const container = document.getElementById('tierInputs');
    
    if (!container) return;
    
    let html = '';
    
    for (let i = 1; i <= tierCount; i++) {
        html += `
            <div class="tier-group">
                <h4><span class="tier-number">–Ø—Ä—É—Å ${i}</span> ${i === 1 ? '(–ù–∏–∂–Ω–∏–π - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)' : i === tierCount ? '(–í–µ—Ä—Ö–Ω–∏–π - —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π)' : '(–°—Ä–µ–¥–Ω–∏–π)'}</h4>
                
                <div class="input-group">
                    <label for="tierShape${i}">–§–æ—Ä–º–∞:</label>
                    <select id="tierShape${i}" onchange="updateTierSizeInputs(${i})" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É</option>
                        <option value="round">–ö—Ä—É–≥–ª—ã–π</option>
                        <option value="square">–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π</option>
                        <option value="rectangular">–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π</option>
                    </select>
                </div>
                
                <div id="tierSizeInputs${i}">
                    <!-- –†–∞–∑–º–µ—Ä—ã —è—Ä—É—Å–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å -->
                </div>
                
                <div class="input-group">
                    <label for="tierFilling${i}">–ù–∞—á–∏–Ω–∫–∞:</label>
                    <select id="tierFilling${i}" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É</option>
                    </select>
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∏–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö —è—Ä—É—Å–æ–≤
    for (let i = 1; i <= tierCount; i++) {
        initializeTierFillingSelect(i);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è—Ä—É—Å–∞
 */
function initializeTierFillingSelect(tierNumber) {
    const select = document.getElementById(`tierFilling${tierNumber}`);
    if (!select) return;
    
    const fillings = getAllFillings();
    
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—á–∏–Ω–∫–∏ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    fillings.forEach(filling => {
        const option = document.createElement('option');
        option.value = filling.key;
        option.textContent = `${filling.name} (${filling.density} –≥/—Å–º¬≥)`;
        select.appendChild(option);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è—Ä—É—Å–∞
 */
function updateTierSizeInputs(tierNumber) {
    const shape = document.getElementById(`tierShape${tierNumber}`).value;
    const container = document.getElementById(`tierSizeInputs${tierNumber}`);
    
    if (!shape || !container) return;
    
    let inputsHtml = '';
    
    switch (shape) {
        case 'round':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="tierDiameter${tierNumber}">–î–∏–∞–º–µ—Ç—Ä (—Å–º):</label>
                        <input type="number" id="tierDiameter${tierNumber}" min="5" max="100" step="0.1" required>
                    </div>
                    <div class="input-group">
                        <label for="tierHeight${tierNumber}">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="tierHeight${tierNumber}" min="1" max="30" step="0.1" required>
                    </div>
                </div>
            `;
            break;
        case 'square':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="tierSide${tierNumber}">–°—Ç–æ—Ä–æ–Ω–∞ (—Å–º):</label>
                        <input type="number" id="tierSide${tierNumber}" min="5" max="100" step="0.1" required>
                    </div>
                    <div class="input-group">
                        <label for="tierHeightSq${tierNumber}">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="tierHeightSq${tierNumber}" min="1" max="30" step="0.1" required>
                    </div>
                </div>
            `;
            break;
        case 'rectangular':
            inputsHtml = `
                <div class="size-inputs">
                    <div class="input-group">
                        <label for="tierLength${tierNumber}">–î–ª–∏–Ω–∞ (—Å–º):</label>
                        <input type="number" id="tierLength${tierNumber}" min="5" max="100" step="0.1" required>
                    </div>
                    <div class="input-group">
                        <label for="tierWidth${tierNumber}">–®–∏—Ä–∏–Ω–∞ (—Å–º):</label>
                        <input type="number" id="tierWidth${tierNumber}" min="5" max="100" step="0.1" required>
                    </div>
                    <div class="input-group">
                        <label for="tierHeightRect${tierNumber}">–í—ã—Å–æ—Ç–∞ (—Å–º):</label>
                        <input type="number" id="tierHeightRect${tierNumber}" min="1" max="30" step="0.1" required>
                    </div>
                </div>
            `;
            break;
    }
    
    container.innerHTML = inputsHtml;
}

/**
 * –†–∞—Å—á–µ—Ç –º–Ω–æ–≥–æ—è—Ä—É—Å–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
 */
function calculateMultiTier() {
    const tierCount = parseInt(document.getElementById('tierCount').value);
    const tiers = [];
    let totalWeight = 0;
    let totalVolume = 0;
    let hasErrors = false;
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —è—Ä—É—Å—É
    for (let i = 1; i <= tierCount; i++) {
        const shape = document.getElementById(`tierShape${i}`).value;
        const fillingKey = document.getElementById(`tierFilling${i}`).value;
        
        if (!shape || !fillingKey) {
            showNotification(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —è—Ä—É—Å–∞ ${i}`, 'error');
            hasErrors = true;
            continue;
        }
        
        let dimensions = {};
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã
            switch (shape) {
                case 'round':
                    dimensions.diameter = parseFloat(document.getElementById(`tierDiameter${i}`).value);
                    dimensions.height = parseFloat(document.getElementById(`tierHeight${i}`).value);
                    break;
                case 'square':
                    dimensions.side = parseFloat(document.getElementById(`tierSide${i}`).value);
                    dimensions.height = parseFloat(document.getElementById(`tierHeightSq${i}`).value);
                    break;
                case 'rectangular':
                    dimensions.length = parseFloat(document.getElementById(`tierLength${i}`).value);
                    dimensions.width = parseFloat(document.getElementById(`tierWidth${i}`).value);
                    dimensions.height = parseFloat(document.getElementById(`tierHeightRect${i}`).value);
                    break;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —è—Ä—É—Å
            const tierResult = calculator.calculateWeightFromDimensions(shape, dimensions, fillingKey);
            
            if (tierResult.success) {
                tiers.push({
                    number: i,
                    ...tierResult
                });
                totalWeight += tierResult.weight;
                totalVolume += tierResult.volume;
            } else {
                showNotification(`–û—à–∏–±–∫–∞ –≤ —è—Ä—É—Å–µ ${i}: ${tierResult.error}`, 'error');
                hasErrors = true;
            }
            
        } catch (error) {
            showNotification(`–û—à–∏–±–∫–∞ –≤ —è—Ä—É—Å–µ ${i}: ${error.message}`, 'error');
            hasErrors = true;
        }
    }
    
    if (!hasErrors && tiers.length > 0) {
        displayMultiTierResult(tiers, totalWeight, totalVolume);
        showNotification('–ú–Ω–æ–≥–æ—è—Ä—É—Å–Ω—ã–π —Ç–æ—Ä—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω!', 'success');
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–Ω–æ–≥–æ—è—Ä—É—Å–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
 */
function displayMultiTierResult(tiers, totalWeight, totalVolume) {
    const resultSection = document.getElementById('multiTierResult');
    const output = document.getElementById('multiTierOutput');
    
    let html = `
        <div class="result-summary">
            <h4>üéÇ –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–Ω–æ–≥–æ—è—Ä—É—Å–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞:</h4>
            <div class="result-detail">
                <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—Ä—É—Å–æ–≤:</span>
                <span class="result-value">${tiers.length}</span>
            </div>
            <div class="result-detail">
                <span>–û–±—â–∏–π –æ–±—ä–µ–º:</span>
                <span class="result-value">${Math.round(totalVolume * 100) / 100} —Å–º¬≥</span>
            </div>
            <div class="result-detail" style="font-size: 1.3em; font-weight: bold; color: #007bff;">
                <span>–û–±—â–∏–π –≤–µ—Å:</span>
                <span class="result-value">${Math.round(totalWeight * 1000) / 1000} –∫–≥</span>
            </div>
        </div>
        
        <h4>üìã –î–µ—Ç–∞–ª–∏ –ø–æ —è—Ä—É—Å–∞–º:</h4>
    `;
    
    tiers.forEach(tier => {
        const percentage = ((tier.weight / totalWeight) * 100).toFixed(1);
        
        html += `
            <div class="result-item">
                <h5>
                    <span class="tier-number">–Ø—Ä—É—Å ${tier.number}</span>
                    ${tier.shape} (${percentage}% –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞)
                </h5>
                <div class="result-detail">
                    <span>–†–∞–∑–º–µ—Ä—ã:</span>
                    <span class="result-value">${tier.dimensions}</span>
                </div>
                <div class="result-detail">
                    <span>–ù–∞—á–∏–Ω–∫–∞:</span>
                    <span class="result-value">${tier.filling.name}</span>
                </div>
                <div class="result-detail">
                    <span>–û–±—ä–µ–º:</span>
                    <span class="result-value">${tier.volume} —Å–º¬≥</span>
                </div>
                <div class="result-detail">
                    <span>–í–µ—Å:</span>
                    <span class="result-value">${tier.weight} –∫–≥</span>
                </div>
            </div>
        `;
    });
    
    output.innerHTML = html;
    resultSection.style.display = 'block';
    
    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    resultSection.scrollIntoView({ behavior: 'smooth' });
}

/**
 * –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ö–õ–ê–î–ö–ê–ú–ò
 */
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const buttons = document.querySelectorAll('.tab-button');
    buttons.forEach(button => button.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    event.target.classList.add('active');
}

/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
 */
function showInstructions(type) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const instructions = document.querySelectorAll('.instruction-content');
    instructions.forEach(inst => inst.classList.remove('active'));
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
    const tabs = document.querySelectorAll('.instruction-tab');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    document.getElementById(type + '-instructions').classList.add('active');
    event.target.classList.add('active');
}

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function showNotification(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existing = document.querySelector('.notification');
    if (existing) {
        existing.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 4000);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
 */
function toggleCustomParams() {
    const checkbox = document.getElementById('useCustomParams');
    const paramsDiv = document.getElementById('customParams');
    
    if (checkbox.checked) {
        paramsDiv.style.display = 'block';
    } else {
        paramsDiv.style.display = 'none';
    }
}